<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Xake</name></assembly>
<members>
<member name="T:Xake.ProgressMessage">
 <summary>
 A message to a progress reporter.
 </summary>
</member>
<member name="T:Xake.ExecContext">
<summary>
 Script execution context
</summary>
</member>
<member name="P:Xake.ExecOptions.Progress">
<summary>
 Dump dependencies only
</summary>
</member>
<member name="P:Xake.ExecOptions.DumpDeps">
<summary>
 Dump dependencies only
</summary>
</member>
<member name="P:Xake.ExecOptions.DryRun">
<summary>
 Do not execute rules, just display run stats
</summary>
</member>
<member name="P:Xake.ExecOptions.DbFileName">
<summary>
 Database file
</summary>
</member>
<member name="P:Xake.ExecOptions.Nologo">
<summary>
 Disable logo message
</summary>
</member>
<member name="P:Xake.ExecOptions.IgnoreCommandLine">
<summary>
 Ignores command line swithes
</summary>
</member>
<member name="P:Xake.ExecOptions.FailOnError">
<summary>
 Defines whether `run` should throw exception if script fails
</summary>
</member>
<member name="P:Xake.ExecOptions.Vars">
<summary>
 Global script variables
</summary>
</member>
<member name="P:Xake.ExecOptions.Targets">
<summary>
 Overrides &quot;want&quot;, i.e. target list
</summary>
</member>
<member name="P:Xake.ExecOptions.ConLogLevel">
<summary>
 Console output verbosity level. Default is Warn
</summary>
</member>
<member name="P:Xake.ExecOptions.FileLog">
<summary>
 Log file and verbosity level.
</summary>
</member>
<member name="P:Xake.ExecOptions.CustomLogger">
<summary>
 custom logger
</summary>
</member>
<member name="P:Xake.ExecOptions.Threads">
<summary>
 Maximum number of rules processed simultaneously.
</summary>
</member>
<member name="P:Xake.ExecOptions.ProjectRoot">
<summary>
 Defines project root folder
</summary>
</member>
<member name="T:Xake.ExecOptions">
<summary>
 Script execution options
</summary>
</member>
<member name="T:Xake.Logging.ILogger">
 <summary>
 The inteface loggers need to implement.
 </summary>
</member>
<member name="T:Xake.Logging.Verbosity">
 <summary>
 Output verbosity level.
 </summary>
</member>
<member name="T:Xake.Logging.Level">
 <summary>
 Log levels.
 </summary>
</member>
<member name="M:Xake.Logging.parseVerbosity(System.String)">
 <summary>
 Parses the string value into verbosity level.
 </summary>
 <param name="parseVerbosity"></param>
</member>
<member name="M:Xake.Logging.PrefixLogger(System.String,Xake.Logging.ILogger)">
 <summary>
 A logger decorator that adds specific prefix to a message.
 </summary>
 <param name="prefix"></param>
 <param name="log"></param>
</member>
<member name="M:Xake.Logging.CombineLogger(Xake.Logging.ILogger,Xake.Logging.ILogger)">
 <summary>
 Creates a logger that is combination of two loggers.
 </summary>
 <param name="log1"></param>
 <param name="log2"></param>
</member>
<member name="P:Xake.Logging.WriteConsoleProgress">
<summary>
 Draws a progress bar to console log.
</summary>
</member>
<member name="M:Xake.Logging.FlushLogs">
<summary>
 Ensures all logs finished pending output.
</summary>
</member>
<member name="P:Xake.Logging.ConsoleLogger">
<summary>
 Console logger with colors highlighting
</summary>
</member>
<member name="P:Xake.Logging.DumbConsoleLogger">
<summary>
 Simplistic console logger.
</summary>
</member>
<member name="M:Xake.Logging.ConsoleLoggerBase(Microsoft.FSharp.Core.FSharpFunc{Xake.Logging.Level,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Xake.Logging.Verbosity)">
 <summary>
 Base console logger.
 </summary>
 <param name="maxLevel"></param>
</member>
<member name="M:Xake.Logging.FileLogger(System.String,Xake.Logging.Verbosity)">
 <summary>
 A logger that writes to file.
 </summary>
 <param name="name"></param>
 <param name="maxLevel"></param>
</member>
<member name="M:Xake.Logging.CustomLogger(Microsoft.FSharp.Core.FSharpFunc{Xake.Logging.Level,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Creates a custom logger.
 </summary>
 <param name="filter">The filter to apply to messages</param>
 <param name="writeFn">The function that dumps a message</param>
</member>
<member name="T:Xake.Pickler.PU`1">
 <summary>
 Main pickler type.
 </summary>
</member>
<member name="M:Xake.Pickler.option``1(Xake.Pickler.PU{``0})">
 <summary>
 Option type pickler.
 </summary>
</member>
<member name="M:Xake.Pickler.alt``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Xake.Pickler.PU{``0}[])">
 <summary>
 Variant (discriminated union) pickler.
 </summary>
 <param name="ftag">Maps type to index in array of picklers.</param>
 <param name="puu">Array of picklers for each type.</param>
</member>
<member name="M:Xake.Pickler.list``1(Xake.Pickler.PU{``0})">
 <summary>
 List pickler.
 </summary>
 <param name="pu"></param>
</member>
<member name="M:Xake.Pickler.pair``2(Xake.Pickler.PU{``0},Xake.Pickler.PU{``1})">
<summary>
 Tuple picklers
</summary>
</member>
<member name="M:Xake.Pickler.wrap0``1(``0)">
 <summary>
 'wrap' helper for argumentless variants
 </summary>
</member>
<member name="M:Xake.Pickler.wrap``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Xake.Pickler.PU{``0})">
 <summary>
 Translates pickler of one type into another's
 </summary>
</member>
<member name="P:Xake.Pickler.unit">
 <summary>
 Unit pickler, does nothing.
 </summary>
</member>
<member name="T:Xake.Pickler">
<summary>
 Pickler Combinators implementation
</summary>
</member>
<member name="P:Xake.Env.isWindows">
 <summary>
 Gets true when started under Windows.
 </summary>
</member>
<member name="P:Xake.Env.isUnix">
 <summary>
 Gets true if running under Unix/OSX (well, linux too).
 </summary>
</member>
<member name="P:Xake.Env.isRunningOnMono">
 <summary>
 Gets true if script is executed under Mono framework.
 </summary>
</member>
<member name="M:Xake.PathExt.op_LessDotGreater(System.String,System.String)">
 <summary>
 Appends the file extension.
 </summary>
</member>
<member name="M:Xake.PathExt.op_LessDivideGreater(System.String,System.String)">
 <summary>
 Combines two paths.
 </summary>
</member>
<member name="M:Xake.PathExt.op_MinusDot(System.String,System.String)">
 <summary>
 Changes or appends file extension.
 </summary>
</member>
<member name="M:Xake.Path.matchGroups(System.String,System.String)">
<summary>
 file name match implementation for rules
</summary>
</member>
<member name="P:Xake.Path.parse">
 <summary>
 Converts Ant-style file pattern to a PathMask.
 </summary>
</member>
<member name="P:Xake.Path.parseDir">
 <summary>
 Converts Ant-style file pattern to a list of parts. Assumes the path specified
 </summary>
</member>
<member name="M:Xake.Path.join(Xake.Path.PathMask,Xake.Path.PathMask)">
 <summary>
 Joins two patterns.
 </summary>
 <param name="p1"></param>
 <param name="p2"></param>
</member>
<member name="P:Xake.Path.toString">
 <summary>
 Converts path to string representation (platform specific).
 </summary>
</member>
<member name="M:Xake.Path.impl.isLastPartForFile``1(``0[])">
 <summary>
 supplementary function for parsing file
 </summary>
</member>
<member name="M:Xake.Path.impl.isLastPartForDir``2(``0,``1)">
 <summary>
 supplementary function for parsing directory
 </summary>
</member>
<member name="M:Xake.Path.impl.mapPart(System.Boolean,System.String)">
 <summary>
 Maps part of file path to a path part.
 </summary>
 <param name="mapPart"></param>
</member>
<member name="M:Xake.Path.impl.normalize(Microsoft.FSharp.Collections.FSharpList{Xake.Path.Part})">
 <summary>
 Normalizes the pattern by resolving parent references and removing \.\
 </summary>
</member>
<member name="P:Xake.FileModule.undefined">
<summary>
 Get the instance indicating the file is not specified.
</summary>
</member>
<member name="M:Xake.FileModule.getLastWriteTime(Xake.File)">
<summary>
 Get the file modification time
</summary>
</member>
<member name="M:Xake.FileModule.exists(Xake.File)">
<summary>
 Get true if file exists
</summary>
</member>
<member name="M:Xake.FileModule.getFullName(Xake.File)">
<summary>
 Gets fully qualified file name.
</summary>
</member>
<member name="M:Xake.FileModule.getDirName(Xake.File)">
<summary>
 Gets the file direactory.
</summary>
</member>
<member name="M:Xake.FileModule.getFileExt(Xake.File)">
<summary>
 Gets the file extension.
</summary>
</member>
<member name="M:Xake.FileModule.getFileName(Xake.File)">
<summary>
 Gets the file name.
</summary>
</member>
<member name="M:Xake.FileModule.make(System.String)">
<summary>
 Makes a new File instance by a file pathname.
</summary>
</member>
<member name="M:Xake.Fileset.Fileset.op_PlusQmark(Xake.Fileset.Fileset,System.Tuple{System.Boolean,System.String})">
<summary>
 Conditional include/exclude operator
</summary>
</member>
<member name="M:Xake.Fileset.Fileset.op_PlusPlus(Xake.Fileset.Fileset,System.String)">
<summary>
 Adds includes pattern to a fileset.
</summary>
</member>
<member name="M:Xake.Fileset.Fileset.op_MinusMinus(Xake.Fileset.Fileset,System.String)">
<summary>
 Adds excludes pattern to a fileset.
</summary>
</member>
<member name="T:Xake.Fileset.FilesetElement">
<summary>
 Filesystem pattern
</summary>
</member>
<member name="T:Xake.Fileset.FileSystemType">
 <summary>
 Defines interface to a file system
 </summary>
</member>
<member name="M:Xake.Fileset.compareFileList(Xake.Fileset.Filelist,Xake.Fileset.Filelist)">
 <summary>
 Compares two file lists and returns differences list.
 </summary>
 <param name="list1"></param>
 <param name="list2"></param>
</member>
<member name="P:Xake.Fileset.toFileList1">
 <summary>
 The same as toFileList but allows to provide file system adapter
 </summary>
</member>
<member name="M:Xake.Fileset.listByMask(System.String)">
 <summary>
 "Materializes" file mask to a list of files/paths
 </summary>
</member>
<member name="P:Xake.Fileset.toFileList">
 <summary>
 "Materializes" fileset to a filelist
 </summary>
</member>
<member name="M:Xake.Fileset.op_UnaryPlus(System.String)">
 <summary>
 Defines the empty fileset with a specified base dir.
 </summary>
 <param name="dir"></param>
</member>
<member name="P:Xake.Fileset.op_BangBang">
 <summary>
 Create a file set for specific file mask. The same as "ls"
 </summary>
</member>
<member name="M:Xake.Fileset.ls(System.String)">
 <summary>
 Creates a new fileset with default options.
 </summary>
 <param name="filePattern"></param>
</member>
<member name="P:Xake.Fileset.filesetPickler">
<summary>
 Gets the pickler for fileset type
</summary>
</member>
<member name="P:Xake.Fileset.DefaultOptions">
<summary>
 Default fileset options
</summary>
</member>
<member name="T:Xake.Fileset.PicklerImpl">
<summary>
 Fileset persistance implementation
</summary>
</member>
<member name="M:Xake.Fileset.Impl.scan(Xake.Fileset.FileSystemType,System.String,Xake.Fileset.Fileset)">
<summary>
 Implementation of fileset execute
 &quot;Materializes&quot; fileset to a filelist
</summary>
</member>
<member name="M:Xake.Fileset.Impl.cd(Xake.Fileset.FileSystemType,System.String,Xake.Path.PathMask)">
 <summary>
  Changes current directory
 </summary>
 <param name="fs">File system implementation</param>
 <param name="startIn">Starting path</param>
 <param name="path">target path</param>
</member>
<member name="T:Xake.Fileset.Impl">
<summary>
 Implementation module
</summary>
</member>
<member name="T:Xake.DomainTypes.Rule`1">
<summary>
 Data type for action&apos;s out parameter. Defined target file and named groups in pattern
</summary>
</member>
<member name="T:Xake.DomainTypes.XakeException">
<summary>
 Defines common exception type
</summary>
</member>
<member name="M:Xake.CommonLib.distinct``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
 Returns a list of unique values for a specific list.
 </summary>
 <param name="ls"></param>
</member>
<member name="M:Xake.CommonLib.take``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
 Takes n first elements from a list.
 </summary>
 <param name="cnt"></param>
</member>
<member name="M:Xake.CommonLib.memoizeRec``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``1}})">
<summary>
**Description**
 Memoizes the recursive function. Memoized function is passed as first argument to f.
**Parameters**
  * `f` - parameter of type `(&apos;a -&gt; &apos;b) -&gt; &apos;a -&gt; &apos;b` The function to be memoized.

**Output Type**
  * `&apos;a -&gt; &apos;b`

**Exceptions**

</summary>
</member>
<member name="M:Xake.CommonLib.memoize``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
 <summary>
 Creates a memoized function with the same signature. Performs memoization by storing run results to a cache.
 </summary>
 <param name="f"></param>
</member>
<member name="M:Xake.Step.updateWaitTime(System.Int32)">
 <summary>
 Adds specific amount to a wait time
 </summary>
</member>
<member name="M:Xake.Step.updateLastStep(Microsoft.FSharp.Core.FSharpFunc{Xake.DomainTypes.StepInfo,Xake.DomainTypes.StepInfo},Xake.DomainTypes.BuildResult)">
 <summary>
 Updated last (current) build step
 </summary>
</member>
<member name="T:Xake.Step">
<summary>
 Utility methods to manipulate build stats
</summary>
</member>
<member name="M:Xake.Storage.openDb(System.String,Xake.Logging.ILogger)">
 <summary>
 Opens database.
 </summary>
 <param name="dbpath">Full xake database file name</param>
 <param name="logger"></param>
</member>
<member name="P:Xake.Storage.resultPU">
 <summary>
 Build result pickler.
 </summary>
</member>
<member name="M:Xake.BuildLog.addResult(Xake.BuildLog.Database,Xake.DomainTypes.BuildResult)">
<summary>
 Adds result to a database
</summary>
</member>
<member name="M:Xake.BuildLog.newDatabase">
<summary>
 Creates a new database
</summary>
</member>
<member name="M:Xake.BuildLog.makeResult(Microsoft.FSharp.Collections.FSharpList{Xake.DomainTypes.Target})">
<summary>
 Creates a new build result
</summary>
</member>
<member name="M:Xake.Recipe.WhenError``2(Microsoft.FSharp.Core.FSharpFunc{System.Exception,``0},Xake.DomainTypes.Recipe{``1,``0})">
 <summary>
 Wraps action so that exceptions occured while executing action are ignored.
 </summary>
 <param name="act"></param>
</member>
<member name="M:Xake.Recipe.CheckErrorLevel``1(Xake.DomainTypes.Recipe{``0,System.Int32})">
 <summary>
 Error handler verifying result of system command.
 </summary>
 <param name="act"></param>
</member>
<member name="P:Xake.Recipe.Not0">
 <summary>
 Supplemental for FailWhen to verify errorlevel set by system command.
 </summary>
</member>
<member name="M:Xake.Recipe.FailWhen``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.String,Xake.DomainTypes.Recipe{``1,``0})">
 <summary>
 Consumes the task output and in case condition is met raises the error.
 </summary>
 <param name="cond"></param>
 <param name="act"></param>
</member>
<member name="M:Xake.Recipe.newstep``1(System.String)">
 <summary>
 Finalizes current build step and starts a new one
 </summary>
 <param name="name">New step name</param>
</member>
<member name="M:Xake.Recipe.setResult``1(Xake.DomainTypes.BuildResult)">
 <summary>
 Updates the build result
 </summary>
 <param name="s'"></param>
</member>
<member name="M:Xake.Recipe.getResult``1">
 <summary>
 Gets current task result.
 </summary>
</member>
<member name="M:Xake.Recipe.getCtx``1">
 <summary>
 Gets action context.
 </summary>
</member>
<member name="M:Xake.Recipe.map``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Xake.DomainTypes.Recipe{``2,``0})">
 <summary>
 Translates the recipe result.
 </summary>
</member>
<member name="M:Xake.Recipe.Ignore``2(Xake.DomainTypes.Recipe{``0,``1})">
 <summary>
 Ignores action result in case task returns the value but you don't need it.
 </summary>
 <param name="act"></param>
</member>
<member name="T:Xake.Progress.ProgressReport">
 <summary>
 Interface for progress module.
 </summary>
</member>
<member name="M:Xake.Progress.openProgress(Microsoft.FSharp.Core.FSharpFunc{Xake.DomainTypes.Target,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpList{Xake.DomainTypes.Target}}},System.Int32,Microsoft.FSharp.Collections.FSharpList{Xake.DomainTypes.Target},System.Boolean)">
 <summary>
 Creates windows taskbar progress reporter.
 </summary>
 <param name="getDurationDeps">gets the dependency duration in ms</param>
 <param name="threadCount"></param>
 <param name="goals"></param>
</member>
<member name="M:Xake.Progress.estimateEndTime``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpList{``0}}},System.Int32,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{``0}})">
 <summary>
 Gets estimated execution time for several target groups. Each group start when previous group is completed and runs in parallel.
 </summary>
</member>
<member name="M:Xake.Progress.emptyProgress">
 <summary>
 Creates "null" progress reporter.
 </summary>
</member>
<member name="M:Xake.Progress.Estimate.execMany``1(Xake.Progress.Estimate.MachineState{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpList{``0}}},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Executes multiple targers simultaneously
</summary>
</member>
<member name="M:Xake.Progress.Estimate.exec``1(Xake.Progress.Estimate.MachineState{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpList{``0}}},``0)">
 <summary>
 "Executes" one task
 </summary>
 <param name="state">Initial "machine" state</param>
 <param name="getDurationDeps">Provide a task information to exec function</param>
 <param name="task">The task to execute</param>
</member>
<member name="T:Xake.Progress.Estimate">
<summary>
 Estimate the task execution times
</summary>
</member>
<member name="M:Xake.Progress.Impl.updateFirst``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
 Updates the first item matching the criteria and returns the updated value.
 </summary>
 <param name="predicate"></param>
 <param name="upd"></param>
</member>
<member name="M:Xake.Progress.WindowsProgress.createTaskbarIndicator">
 <summary>
 Creates a Windows 7 taskbar progress indicator
 </summary>
</member>
<member name="T:Xake.DependencyAnalysis.ChangeReason">
 <summary>
 Dependency state.
 </summary>
</member>
<member name="M:Xake.DependencyAnalysis.dumpDeps(Xake.ExecContext,Microsoft.FSharp.Collections.FSharpList{Xake.DomainTypes.Target})">
<summary>
 Dumps all dependencies for particular target
</summary>
</member>
<member name="M:Xake.DependencyAnalysis.getChangeReasons(Xake.ExecContext,Microsoft.FSharp.Core.FSharpFunc{Xake.DomainTypes.Target,Microsoft.FSharp.Collections.FSharpList{Xake.DependencyAnalysis.ChangeReason}},Xake.DomainTypes.Target)">
 <summary>
 Gets the list of reasons to rebuilt the target. Empty list means target is not changed.
 </summary>
 <param name="ctx"></param>
 <param name="getTargetDeps">gets state for nested dependency</param>
 <param name="target">The target to analyze</param>
</member>
<member name="M:Xake.DependencyAnalysis.getDepState(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpOption{System.String}},Microsoft.FSharp.Core.FSharpFunc{Xake.Fileset.Fileset,Xake.Fileset.Filelist},Microsoft.FSharp.Core.FSharpFunc{Xake.DomainTypes.Target,Microsoft.FSharp.Collections.FSharpList{Xake.DependencyAnalysis.ChangeReason}},Xake.DomainTypes.Dependency)">
<summary>
 Gets single dependency state and reason of a change.
</summary>
</member>
<member name="M:Xake.DependencyAnalysis.getExecTime(Xake.ExecContext,Xake.DomainTypes.Target)">
 <summary>
 Gets target execution time in the last run
 </summary>
 <param name="ctx"></param>
 <param name="target"></param>
</member>
<member name="M:Xake.ExecCore.need(Microsoft.FSharp.Collections.FSharpList{Xake.DomainTypes.Target})">
<summary>
 &quot;need&quot; implementation
</summary>
</member>
<member name="M:Xake.ExecCore.runScript(Xake.ExecOptions,Xake.DomainTypes.Rules{Xake.ExecContext})">
<summary>
 Executes the build script
</summary>
</member>
<member name="M:Xake.ExecCore.runBuild(Xake.ExecContext,Xake.ExecOptions,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{System.String}})">
<summary>
 Runs the build (main function of xake)
</summary>
</member>
<member name="M:Xake.ExecCore.dryRun(Xake.ExecContext,Xake.ExecOptions,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{System.String}})">
<summary>
 Implementation of &quot;dry run&quot;
</summary>
</member>
<member name="M:Xake.ExecCore.makeTarget(Xake.ExecContext,System.String)">
<summary>
 phony actions are detected by their name so if there&apos;s &quot;clean&quot; phony and file &quot;clean&quot; in `need` list if will choose first
</summary>
</member>
<member name="M:Xake.ExecCore.execNeed(Xake.ExecContext,Microsoft.FSharp.Collections.FSharpList{Xake.DomainTypes.Target})">
 <summary>
 Gets the status of dependency artifacts (obtained from 'need' calls).
 </summary>
 <returns>
 ExecStatus.Succeed,... in case at least one dependency was rebuilt
 </returns>
</member>
<member name="M:Xake.ExecCore.execParallel(Xake.ExecContext)">
 <summary>
 Executes several artifacts in parallel.
 </summary>
</member>
<member name="M:Xake.ExecCore.newTaskContext(Microsoft.FSharp.Collections.FSharpList{Xake.DomainTypes.Target},Microsoft.FSharp.Collections.FSharpMap{System.String,System.String},Xake.ExecContext)">
 <summary>
 Creates a context for a new task
 </summary>
</member>
<member name="M:Xake.ExecCore.traceLog``1(Xake.Logging.Level,Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Xake.DomainTypes.Recipe{Xake.ExecContext,Microsoft.FSharp.Core.Unit}})">
<summary>
 Writes the message with formatting to a log
</summary>
</member>
<member name="P:Xake.ExecCore.XakeOptions">
<summary>
 Default options
</summary>
</member>
<member name="T:Xake.XakeScript.RulesBuilder">
<summary>
 Script builder.
</summary>
</member>
<member name="T:Xake.XakeScript.XakeScript">
<summary>
 Main type.
</summary>
</member>
<member name="M:Xake.XakeScript.op_EqualsGreater``1(System.String,Xake.DomainTypes.Recipe{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates phony action (check if I can unify the operator name)
</summary>
</member>
<member name="M:Xake.XakeScript.op_DotDotQmarkGreater``1(Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean},Xake.DomainTypes.Recipe{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates the rule for specified file pattern.
</summary>
</member>
<member name="P:Xake.ScriptFuncs.RuleActionArgs.FullName">
<summary>
 Gets the full name of resulting file.
</summary>
</member>
<member name="P:Xake.ScriptFuncs.RuleActionArgs.File">
<summary>
 Gets the resulting file.
</summary>
</member>
<member name="M:Xake.ScriptFuncs.RuleActionArgs.GetGroup(System.String)">
<summary>
 Gets group (part of the name) by its name.
</summary>
</member>
<member name="M:Xake.ScriptFuncs.op_LeftShift(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Defines a rule which demands the other targets to be sequentially built.
 Unlike &apos;&lt;==&apos; operator, this one waits the completion of one before issuing another rule.
</summary>
</member>
<member name="M:Xake.ScriptFuncs.op_LessEqualsEquals(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Defines a rule that demands specified targets
 e.g. &quot;main&quot; ==&gt; [&quot;build-release&quot;; &quot;build-debug&quot;; &quot;unit-test&quot;]
</summary>
</member>
<member name="M:Xake.ScriptFuncs.trace``1">
 <summary>
 Writes a message to a log.
 </summary>
</member>
<member name="M:Xake.ScriptFuncs.getRuleMatch(System.String)">
 <summary>
 Gets group (part of the name) by its name.
 </summary>
</member>
<member name="M:Xake.ScriptFuncs.getTargetFullName">
 <summary>
 Gets current target file name with path
 </summary>
</member>
<member name="M:Xake.ScriptFuncs.getTargetFiles">
 <summary>
 Gets current target file
 </summary>
</member>
<member name="M:Xake.ScriptFuncs.getTargetFile">
 <summary>
 Gets current target file
 </summary>
</member>
<member name="M:Xake.ScriptFuncs.getFiles(Xake.Fileset.Fileset)">
 <summary>
 Gets the list of files matching specified fileset.
 </summary>
 <param name="fileset"></param>
</member>
<member name="M:Xake.ScriptFuncs.getVar(System.String)">
 <summary>
 Gets the global (options) variable.
 </summary>
 <param name="variableName"></param>
</member>
<member name="M:Xake.ScriptFuncs.getEnv``1(System.String)">
 <summary>
 Gets the environment variable.
 </summary>
 <param name="variableName"></param>
</member>
<member name="M:Xake.ScriptFuncs.alwaysRerun``1">
 <summary>
 Instructs Xake to rebuild the target even if dependencies are not changed.
 </summary>
</member>
<member name="M:Xake.ScriptFuncs.need(Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Executes and awaits specified artifacts.
 </summary>
 <param name="targets"></param>
</member>
<member name="M:Xake.ScriptFuncs.getCtxOptions">
 <summary>
 Gets the script options.
 </summary>
</member>
<member name="M:Xake.DotNetFwk.locateAssembly(Xake.DotNetFwk.FrameworkInfo)">
 <summary>
 Locates "global" assembly for specific framework
 </summary>
 <param name="fwk"></param>
</member>
<member name="P:Xake.DotNetFwk.locateFramework">
 <summary>
 Attempts to locate either .NET or Mono framework.
 </summary>
 <param name="fwk"></param>
</member>
<member name="M:Xake.pkg_config.get_variable(System.String,System.String)">
<summary>
 Get the version of a package
</summary>
</member>
<member name="M:Xake.pkg_config.get_mod_version(System.String)">
<summary>
 Get the version of a package
</summary>
</member>
<member name="M:Xake.pkg_config.exists(System.String)">
<summary>
 Gets true if specified package exists
</summary>
</member>
<member name="M:Xake.pkg_config.pkgcgf_bool(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Gets true if specified package exists
</summary>
</member>
<member name="M:Xake.Tasks.CpImpl.copyFrom(System.String)">
 <summary>
 Requests the file and writes under specific name
 </summary>
</member>
<member name="M:Xake.Tasks.CpImpl.copyFile(System.String,System.String)">
 <summary>
 Copies one file to another location.
 </summary>
 <param name="src">Source file name</param>
 <param name="tgt">Target file location and name.</param>
</member>
<member name="P:Xake.Tasks.ShellImpl.ShellOptions.UseClr">
<summary>
 Indicates command has to be executed under mono/.net runtime
</summary>
</member>
<member name="M:Xake.Tasks.ShellImpl.Shell(Xake.Tasks.ShellImpl.ShellOptions)">
<summary>
 Start shell/system process.
</summary>
</member>
<member name="M:Xake.Tasks.Dotnet.Impl._system(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}},System.String)">
 <summary>
 Executes system command. E.g. '_system SystemOptions "dir" []'
 </summary>
</member>
<member name="M:Xake.Tasks.Dotnet.Impl.makeResourceName(Xake.ResourceFileset.ResourceSetOptions,Microsoft.FSharp.Core.FSharpOption{System.String},System.String)">
<summary>
 Makes resource name given the file name
</summary>
</member>
<member name="M:Xake.Tasks.Dotnet.Impl.levelFromString(Xake.Logging.Level,System.String)">
<summary>
 Parses the compiler output and returns messageLevel
</summary>
</member>
<member name="M:Xake.Tasks.Dotnet.Impl.getRelative(System.String,System.String)">
<summary>
 Gets the path relative to specified root path
</summary>
</member>
<member name="M:Xake.Tasks.Dotnet.Impl.escapeArgument(System.String)">
<summary>
 Escapes argument according to CSC.exe rules (see http://msdn.microsoft.com/en-us/library/78f4aasd.aspx)
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.CscPath">
<summary>
 Path to csc executable
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.FailOnError">
<summary>
 Build fails on compile error.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.CommandArgs">
<summary>
 Custom command-line arguments
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.TargetFramework">
<summary>
 Target .NET framework
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Unsafe">
<summary>
 Allows unsafe code.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Define">
<summary>
 Defines conditional compilation symbols.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Resources">
<summary>
 Embeds the specified resource.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.RefGlobal">
<summary>
 References the specified assemblies from GAC.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Ref">
<summary>
 References metadata from the specified assembly files.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Src">
<summary>
 Source files.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Out">
<summary>
 Specifies the output file name (default: base name of file with main class or first file).
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Target">
<summary>
 Specifies the format of the output file.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettingsType.Platform">
<summary>
 Limits which platforms this code can run on. The default is anycpu.
</summary>
</member>
<member name="M:Xake.Tasks.Dotnet.CscImpl.Csc(Xake.Tasks.Dotnet.CscImpl.CscSettingsType)">
<summary>
 C# compiler task
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.CscImpl.CscSettings">
<summary>
 Default setting for CSC task so that you could only override required settings
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.NoFramework">
<summary>
 Do not reference the default CLI assemblies by default
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.FailOnError">
<summary>
 Build fails on compile error.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.CommandArgs">
<summary>
 Custom command-line arguments
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.FscVersion">
<summary>
 Use specific FSC compiler version (only dotnet)
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.TargetFramework">
<summary>
 Target .NET framework
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.Define">
<summary>
 Defines conditional compilation symbols.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.Resources">
<summary>
 Embeds the specified resource.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.RefGlobal">
<summary>
 References the specified assemblies from GAC.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.Ref">
<summary>
 References metadata from the specified assembly files.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.Src">
<summary>
 Source files.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.Out">
<summary>
 Specifies the output file name (default: base name of file with main class or first file).
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.Target">
<summary>
 Specifies the format of the output file.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettingsType.Platform">
<summary>
 Limits which platforms this code can run on. The default is anycpu.
</summary>
</member>
<member name="T:Xake.Tasks.Dotnet.FscImpl.FscSettingsType">
 <summary>
 Fsc (F# compiler) task settings.
 </summary>
</member>
<member name="M:Xake.Tasks.Dotnet.FscImpl.Fsc(Xake.Tasks.Dotnet.FscImpl.FscSettingsType)">
<summary>
 F# compiler task
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.FscImpl.FscSettings">
 <summary>
 Default settings for Fsc task.
 </summary>
</member>
<member name="M:Xake.Tasks.Dotnet.ResgenImpl.ResGen(Xake.Tasks.Dotnet.ResgenImpl.ResgenSettingsType)">
<summary>
 Generates binary resource files from resx, txt etc
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.MsbuildImpl.MSBuildSettingsType.RspFile">
<summary>
 Insert command-line settings from file
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.MsbuildImpl.MSBuildSettingsType.Verbosity">
<summary>
 Output this amount of information. All MSBuild output is considered Infomation so is displayed when logging level is Chatty.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.MsbuildImpl.MSBuildSettingsType.ToolsVersion">
<summary>
 The version of MSBuild toolset (tasks, targets etc) to use during the build.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.MsbuildImpl.MSBuildSettingsType.MaxCpuCount">
<summary>
 Maximum number of concurrent processes. Some 0 - to use number of processors on the computer.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.MsbuildImpl.MSBuildSettingsType.Property">
<summary>
 Set or override project-level properties.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.MsbuildImpl.MSBuildSettingsType.Target">
<summary>
 Build these targets.
</summary>
</member>
<member name="P:Xake.Tasks.Dotnet.MsbuildImpl.MSBuildSettingsType.BuildFile">
<summary>
 Build file location
</summary>
</member>
<member name="M:Xake.Tasks.MiscImpl.writeText(System.String)">
 <summary>
 Writes text to a file.
 </summary>
</member>
<member name="M:Xake.Main.xake(Xake.ExecOptions)">
 <summary>
 Create xake build script using command-line arguments to define script options
 </summary>
 <param name="options">Initial options set. Could be overridden by a command line arguments.
 Define option IgnoreCommandLine=true to ignore command line arguments
 </param>
</member>
<member name="M:Xake.Main.xakeArgs(Microsoft.FSharp.Collections.FSharpList{System.String},Xake.ExecOptions)">
 <summary>
 Creates a script with script parameters passed as list of strings.
 </summary>
 <param name="args"></param>
 <param name="initialOptions"></param>
</member>
</members>
</doc>
